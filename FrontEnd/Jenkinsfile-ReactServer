pipeline {
    agent any  // 이 파이프라인이 실행될 Jenkins 에이전트를 지정합니다. 'any'는 사용 가능한 임의의 에이전트에서 실행될 수 있음을 의미합니다.
    triggers {
        GenericTrigger(
            genericVariables: [
                [key: 'USER_NAME', value: '$.user.name', expressionType: 'JSONPath']
            ],
            causeString: 'Triggered by GitLab Merge Request by ${USER_NAME}',
            printContributedVariables: true,
            printPostContent: true
        )
    }
    tools {
        nodejs '20.11.1'
    }

    stages {
        stage('Setup') {
            steps {
                script {
                    // 빌드 설명 설정
                    currentBuild.description = "Merge requested by: ${env.USER_NAME}"
                }
            }
        }

        stage('Deploy with Docker Compose') {  // 'Deploy with Docker Compose'라는 이름의 단계를 정의합니다. 이 단계에서는 Docker Compose를 사용한 배포가 이루어집니다.
            steps {
                script {
                    echo "certbot 컨테이너 실행 상태 확인 중..."
                    def isCertBotRunning = sh(script: "docker ps --filter name=nowdoboss_certbot --filter status=running --format '{{.Names}}'", returnStdout: true).trim()
                    echo "certbot 실행 상태: ${isCertBotRunning}"
                    if (isCertBotRunning == "") {
                        echo "Certbot dockerfile 빌드..."
                        sh "docker-compose -f ./FrontEnd/docker-compose-frontend.yml up --build -d nowdoboss_certbot"
                    }
                    
                    // React 애플리케이션을 빌드하는 명령입니다. `--no-start` 옵션은 컨테이너를 생성하지만 실행하지는 않습니다.
                    sh "docker-compose -f ./FrontEnd/docker-compose-frontend.yml run --no-start nowdoboss_react"
                    // Nginx 컨테이너를 종료하고 관련 볼륨을 삭제합니다. 이 단계는 이전에 생성된 데이터를 클리어하고 새로운 정적 파일을 적용하기 위해 필요합니다.
                    sh "docker-compose -f ./FrontEnd/docker-compose-frontend.yml down --volumes nowdoboss_frontend"
                    // Nginx 컨테이너를 재빌드하고 백그라운드에서 실행합니다. `--build` 옵션은 이미지를 다시 빌드하고, `-d`는 백그라운드 모드에서 실행합니다.
                    sh "docker-compose -f ./FrontEnd/docker-compose-frontend.yml up --build -d nowdoboss_frontend"
                }
            }
        }

        stage('SonarQube Analysis - ReactServer') {
            steps {
                dir('FrontEnd') {    
                    withSonarQubeEnv('SonarQube Server') {
                        sh 'npm install'
                        sh 'npm run sonarqube'
                    }
                }
            }
        }
    }
}
